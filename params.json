{"name":"Fuse","tagline":"Mirror of git://fuse.git.sourceforge.net/gitroot/fuse/fuse","body":"General Information\r\n===================\r\n\r\nFUSE (Filesystem in Userspace) is a simple interface for userspace\r\nprograms to export a virtual filesystem to the Linux kernel.  FUSE\r\nalso aims to provide a secure method for non privileged users to\r\ncreate and mount their own filesystem implementations.\r\n\r\nYou can download the source code releases from\r\n\r\n  http://sourceforge.net/projects/fuse\r\n\r\nor alternatively you can use CVS to get the very latest development\r\nversion:\r\n\r\n  cvs -d :pserver:anonymous@fuse.cvs.sourceforge.net:/cvsroot/fuse co fuse\r\n\r\n\r\nDependencies\r\n============\r\n\r\nLinux kernel version 2.6.X where X >= 9.\r\n\r\nAlternatively a kernel module from FUSE release 2.5.* can be used with\r\nthis release, which supports kernels >= 2.4.21.\r\n\r\nInstallation\r\n============\r\n\r\n./configure\r\nmake\r\nmake install\r\nmodprobe fuse\r\n\r\nYou may also need to add '/usr/local/lib' to '/etc/ld.so.conf' and/or\r\nrun ldconfig.\r\n\r\nYou'll also need a fuse kernel module, Linux kernels 2.6.14 or later\r\ncontain FUSE support.\r\n\r\nFor more details see the file 'INSTALL'\r\n\r\nHow To Use\r\n==========\r\n\r\nFUSE is made up of three main parts:\r\n\r\n - A kernel filesystem module\r\n\r\n - A userspace library\r\n\r\n - A mount/unmount program\r\n\r\n\r\nHere's how to create your very own virtual filesystem in five easy\r\nsteps (after installing FUSE):\r\n\r\n  1) Edit the file example/fusexmp.c to do whatever you want...\r\n\r\n  2) Build the fusexmp program\r\n\r\n  3) run 'example/fusexmp /mnt/fuse -d'\r\n\r\n  4) ls -al /mnt/fuse\r\n\r\n  5) Be glad\r\n\r\nIf it doesn't work out, please ask!  Also see the file 'include/fuse.h' for\r\ndetailed documentation of the library interface.\r\n\r\nSecurity\r\n========\r\n\r\nIf you run 'make install', the fusermount program is installed\r\nset-user-id to root.  This is done to allow normal users to mount\r\ntheir own filesystem implementations.\r\n\r\nThere must however be some limitations, in order to prevent Bad User from\r\ndoing nasty things.  Currently those limitations are:\r\n\r\n  - The user can only mount on a mountpoint, for which it has write\r\n    permission\r\n\r\n  - The mountpoint is not a sticky directory which isn't owned by the\r\n    user (like /tmp usually is)\r\n\r\n  - No other user (including root) can access the contents of the mounted\r\n    filesystem.\r\n\r\nConfiguration\r\n=============\r\n\r\nSome options regarding mount policy can be set in the file\r\n'/etc/fuse.conf'\r\n\r\nCurrently these options are:\r\n\r\nmount_max = NNN\r\n\r\n  Set the maximum number of FUSE mounts allowed to non-root users.\r\n  The default is 1000.\r\n\r\nuser_allow_other\r\n\r\n  Allow non-root users to specify the 'allow_other' or 'allow_root'\r\n  mount options.\r\n\r\n\r\nMount options\r\n=============\r\n\r\nMost of the generic mount options described in 'man mount' are\r\nsupported (ro, rw, suid, nosuid, dev, nodev, exec, noexec, atime,\r\nnoatime, sync async, dirsync).  Filesystems are mounted with\r\n'-onodev,nosuid' by default, which can only be overridden by a\r\nprivileged user.\r\n\r\nThese are FUSE specific mount options that can be specified for all\r\nfilesystems:\r\n\r\ndefault_permissions\r\n\r\n  By default FUSE doesn't check file access permissions, the\r\n  filesystem is free to implement it's access policy or leave it to\r\n  the underlying file access mechanism (e.g. in case of network\r\n  filesystems).  This option enables permission checking, restricting\r\n  access based on file mode.  This is option is usually useful\r\n  together with the 'allow_other' mount option.\r\n\r\nallow_other\r\n\r\n  This option overrides the security measure restricting file access\r\n  to the user mounting the filesystem.  So all users (including root)\r\n  can access the files.  This option is by default only allowed to\r\n  root, but this restriction can be removed with a configuration\r\n  option described in the previous section.\r\n\r\nallow_root\r\n\r\n  This option is similar to 'allow_other' but file access is limited\r\n  to the user mounting the filesystem and root.  This option and\r\n  'allow_other' are mutually exclusive.\r\n\r\nkernel_cache\r\n\r\n  This option disables flushing the cache of the file contents on\r\n  every open().  This should only be enabled on filesystems, where the\r\n  file data is never changed externally (not through the mounted FUSE\r\n  filesystem).  Thus it is not suitable for network filesystems and\r\n  other \"intermediate\" filesystems.\r\n\r\n  NOTE: if this option is not specified (and neither 'direct_io') data\r\n  is still cached after the open(), so a read() system call will not\r\n  always initiate a read operation.\r\n\r\nauto_cache\r\n\r\n  This option enables automatic flushing of the data cache on open().\r\n  The cache will only be flushed if the modification time or the size\r\n  of the file has changed.\r\n\r\nlarge_read\r\n\r\n  Issue large read requests.  This can improve performance for some\r\n  filesystems, but can also degrade performance.  This option is only\r\n  useful on 2.4.X kernels, as on 2.6 kernels requests size is\r\n  automatically determined for optimum performance.\r\n\r\ndirect_io\r\n\r\n  This option disables the use of page cache (file content cache) in\r\n  the kernel for this filesystem.  This has several affects:\r\n\r\n     - Each read() or write() system call will initiate one or more\r\n       read or write operations, data will not be cached in the\r\n       kernel.\r\n\r\n     - The return value of the read() and write() system calls will\r\n       correspond to the return values of the read and write\r\n       operations.  This is useful for example if the file size is not\r\n       known in advance (before reading it).\r\n\r\nmax_read=N\r\n\r\n  With this option the maximum size of read operations can be set.\r\n  The default is infinite.  Note that the size of read requests is\r\n  limited anyway to 32 pages (which is 128kbyte on i386).\r\n\r\nmax_readahead=N\r\n\r\n  Set the maximum number of bytes to read-ahead.  The default is\r\n  determined by the kernel.  On linux-2.6.22 or earlier it's 131072\r\n  (128kbytes)\r\n\r\nmax_write=N\r\n\r\n  Set the maximum number of bytes in a single write operation.  The\r\n  default is 128kbytes.  Note, that due to various limitations, the\r\n  size of write requests can be much smaller (4kbytes).  This\r\n  limitation will be removed in the future.\r\n\r\nasync_read\r\n\r\n  Perform reads asynchronously. This is the default\r\n\r\nsync_read\r\n\r\n  Perform all reads (even read-ahead) synchronously.\r\n\r\nhard_remove\r\n\r\n  The default behavior is that if an open file is deleted, the file is\r\n  renamed to a hidden file (.fuse_hiddenXXX), and only removed when\r\n  the file is finally released.  This relieves the filesystem\r\n  implementation of having to deal with this problem.  This option\r\n  disables the hiding behavior, and files are removed immediately in\r\n  an unlink operation (or in a rename operation which overwrites an\r\n  existing file).\r\n\r\n  It is recommended that you not use the hard_remove option. When\r\n  hard_remove is set, the following libc functions fail on unlinked\r\n  files (returning errno of ENOENT):\r\n     - read()\r\n     - write()\r\n     - fsync()\r\n     - close()\r\n     - f*xattr()\r\n     - ftruncate()\r\n     - fstat()\r\n     - fchmod()\r\n     - fchown()\r\n\r\ndebug\r\n\r\n  Turns on debug information printing by the library.\r\n\r\nfsname=NAME\r\n\r\n  Sets the filesystem source (first field in /etc/mtab).  The default\r\n  is the program name.\r\n\r\nsubtype=TYPE\r\n\r\n  Sets the filesystem type (third field in /etc/mtab).  The default is\r\n  the program name.\r\n\r\n  If the kernel suppports it, /etc/mtab and /proc/mounts will show the\r\n  filesystem type as \"fuse.TYPE\"\r\n\r\n  If the kernel doesn't support subtypes, the source filed will be\r\n  \"TYPE#NAME\", or if fsname option is not specified, just \"TYPE\".\r\n\r\nuse_ino\r\n\r\n  Honor the 'st_ino' field in getattr() and fill_dir().  This value is\r\n  used to fill in the 'st_ino' field in the stat()/lstat()/fstat()\r\n  functions and the 'd_ino' field in the readdir() function.  The\r\n  filesystem does not have to guarantee uniqueness, however some\r\n  applications rely on this value being unique for the whole\r\n  filesystem.\r\n\r\nreaddir_ino\r\n\r\n  If 'use_ino' option is not given, still try to fill in the 'd_ino'\r\n  field in readdir().  If the name was previously looked up, and is\r\n  still in the cache, the inode number found there will be used.\r\n  Otherwise it will be set to '-1'.  If 'use_ino' option is given,\r\n  this option is ignored.\r\n\r\nnonempty\r\n\r\n  Allows mounts over a non-empty file or directory.  By default these\r\n  mounts are rejected (from version 2.3.1) to prevent accidental\r\n  covering up of data, which could for example prevent automatic\r\n  backup.\r\n\r\numask=M\r\n\r\n  Override the permission bits in 'st_mode' set by the filesystem.\r\n  The resulting permission bits are the ones missing from the given\r\n  umask value.  The value is given in octal representation.\r\n\r\nuid=N\r\n\r\n  Override the 'st_uid' field set by the filesystem.\r\n\r\ngid=N\r\n\r\n  Override the 'st_gid' field set by the filesystem.\r\n\r\nblkdev\r\n\r\n  Mount a filesystem backed by a block device.  This is a privileged\r\n  option.  The device must be specified with the 'fsname=NAME' option.\r\n\r\nentry_timeout=T\r\n\r\n  The timeout in seconds for which name lookups will be cached. The\r\n  default is 1.0 second.  For all the timeout options, it is possible\r\n  to give fractions of a second as well (e.g. \"-oentry_timeout=2.8\")\r\n\r\nnegative_timeout=T\r\n\r\n  The timeout in seconds for which a negative lookup will be cached.\r\n  This means, that if file did not exist (lookup retuned ENOENT), the\r\n  lookup will only be redone after the timeout, and the file/directory\r\n  will be assumed to not exist until then.  The default is 0.0 second,\r\n  meaning that caching negative lookups are disabled.\r\n\r\nattr_timeout=T\r\n\r\n  The timeout in seconds for which file/directory attributes are\r\n  cached.  The default is 1.0 second.\r\n\r\nac_attr_timeout=T\r\n\r\n  The timeout in seconds for which file attributes are cached for the\r\n  purpose of checking if \"auto_cache\" should flush the file data on\r\n  open.   The default is the value of 'attr_timeout'\r\n\r\nintr\r\n\r\n  Allow requests to be interrupted.  Turning on this option may result\r\n  in unexpected behavior, if the filesystem does not support request\r\n  interruption.\r\n\r\nintr_signal=NUM\r\n\r\n  Specify which signal number to send to the filesystem when a request\r\n  is interrupted.  The default is 10 (USR1).\r\n\r\nmodules=M1[:M2...]\r\n\r\n  Add modules to the filesystem stack.  Modules are pushed in the\r\n  order they are specified, with the original filesystem being on the\r\n  bottom of the stack.\r\n\r\n\r\nModules distributed with fuse\r\n-----------------------------\r\n\r\niconv\r\n`````\r\nPerform file name character set conversion.  Options are:\r\n\r\nfrom_code=CHARSET\r\n\r\n  Character set to convert from (see iconv -l for a list of possible\r\n  values).  Default is UTF-8.\r\n\r\nto_code=CHARSET\r\n\r\n  Character set to convert to.  Default is determined by the current\r\n  locale.\r\n\r\n\r\nsubdir\r\n``````\r\nPrepend a given directory to each path. Options are:\r\n\r\nsubdir=DIR\r\n\r\n  Directory to prepend to all paths.  This option is mandatory.\r\n\r\nrellinks\r\n\r\n  Transform absolute symlinks into relative\r\n\r\nnorellinks\r\n\r\n  Do not transform absolute symlinks into relative.  This is the default.\r\n\r\n\r\nReporting bugs\r\n==============\r\n\r\nPlease send bug reports to the <fuse-devel@lists.sourceforge.net>\r\nmailing list.\r\n\r\nThe list is open, you need not be subscribed to post.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}